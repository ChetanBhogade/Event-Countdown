{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","selectedDate","setSelectedDate","eventName","setEventName","timer","setTimer","useEffect","setInterval","date","timespan","Date","now","calculateTime","handleCountDown","milliSeconds","days","Math","floor","hours","minutes","seconds","className","Card","Header","Body","Form","Row","Col","sm","lg","Control","name","onChange","event","target","value","placeholder","placeholderText","selected","minDate","dateFormat","Title","Text","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAyFeA,MAlFf,WAAgB,IAAD,EAC2BC,mBAAS,MADpC,mBACNC,EADM,KACQC,EADR,OAEqBF,mBAAS,MAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KAcbC,qBAAU,WACRC,aAAY,YAVU,SAACC,GACvB,IAEIC,EAFY,IAAIC,KAAKF,GACbE,KAAKC,MAEbF,EAAW,GACbJ,EAASO,EAAcH,IAMvBI,CAAgBb,KACf,QAGL,IAAMY,EAAgB,SAACE,GAOrB,MANW,CACTC,KAAMC,KAAKC,MAAMH,EAAY,OAC7BI,MAAOF,KAAKC,MAAOH,EAAY,KAAuB,IACtDK,QAASH,KAAKC,MAAOH,EAAY,IAAkB,IACnDM,QAASJ,KAAKC,MAAOH,EAAe,IAAQ,MAKhD,OACE,yBAAKO,UAAU,iBACb,yBAAKA,UAAU,oBACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,sBACd,kBAACC,EAAA,EAAKC,OAAN,KACE,gDAEF,kBAACD,EAAA,EAAKE,KAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKL,UAAU,WACb,kBAACM,EAAA,EAAD,CAAKC,GAAG,KAAKP,UAAU,OAAOQ,GAAG,KAC/B,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,YACLC,SAAU,SAACC,GACT9B,EAAa8B,EAAMC,OAAOC,QAE5BC,YAAY,sBAGhB,kBAACT,EAAA,EAAD,CAAKC,GAAG,KAAKP,UAAU,OAAOQ,GAAG,KAC/B,kBAAC,IAAD,CACEQ,gBAAgB,oBAChBhB,UAAU,eACVU,KAAK,YACLO,SAAUtC,EACVgC,SAAU,SAACxB,GACTP,EAAgBO,IAElB+B,QAAS,IAAI7B,KACb8B,WAAW,kBAKnB,6BACA,kBAAClB,EAAA,EAAKmB,MAAN,KACE,4BAAKvC,IAEP,kBAACoB,EAAA,EAAKoB,KAAN,cACStC,EAAMW,KADf,YAC8BX,EAAMc,MADpC,cACsDd,EAAMe,QAD5D,cAEcf,EAAMgB,UAGtB,kBAACE,EAAA,EAAKqB,OAAN,CAAatB,UAAU,qBAAvB,sBCpEUuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.139a01b6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Form, Card, Row, Col } from \"react-bootstrap\";\nimport ReactDatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [eventName, setEventName] = useState(null);\n  const [timer, setTimer] = useState({});\n\n  const handleCountDown = (date) => {\n    let eventDate = new Date(date);\n    let today = Date.now();\n    let timespan = eventDate - today;\n    if (timespan > 0) {\n      setTimer(calculateTime(timespan));\n    }\n  };\n\n  useEffect(() => {\n    setInterval(() => {\n      handleCountDown(selectedDate);\n    }, 1000);\n  });\n\n  const calculateTime = (milliSeconds) => {\n    let time = {\n      days: Math.floor(milliSeconds / (1000 * 60 * 60 * 24)),\n      hours: Math.floor((milliSeconds / (1000 * 60 * 60)) % 24),\n      minutes: Math.floor((milliSeconds / (1000 * 60)) % 60),\n      seconds: Math.floor((milliSeconds / 1000) % 60),\n    };\n    return time;\n  };\n\n  return (\n    <div className=\"row my-5 py-5\">\n      <div className=\"col-md-8 mx-auto\">\n        <Card className=\"text-center shadow\">\n          <Card.Header>\n            <h3>Event Countdown</h3>\n          </Card.Header>\n          <Card.Body>\n            <Form>\n              <Row className=\"mx-auto\">\n                <Col sm=\"12\" className=\"my-1\" lg=\"6\">\n                  <Form.Control\n                    name=\"EventName\"\n                    onChange={(event) => {\n                      setEventName(event.target.value);\n                    }}\n                    placeholder=\"Enter Event Name\"\n                  />\n                </Col>\n                <Col sm=\"12\" className=\"my-1\" lg=\"6\">\n                  <ReactDatePicker\n                    placeholderText=\"Select Event Date\"\n                    className=\"form-control\"\n                    name=\"EventDate\"\n                    selected={selectedDate}\n                    onChange={(date) => {\n                      setSelectedDate(date);\n                    }}\n                    minDate={new Date()}\n                    dateFormat=\"dd/MM/yyyy\"\n                  />\n                </Col>\n              </Row>\n            </Form>\n            <hr />\n            <Card.Title>\n              <h2>{eventName}</h2>\n            </Card.Title>\n            <Card.Text>\n              Days: {timer.days}, Hours: {timer.hours}, Minutes: {timer.minutes}\n              , Seconds: {timer.seconds}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer className=\"blockquote-footer\">\n            Chetan Bhogade\n          </Card.Footer>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}